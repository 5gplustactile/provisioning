name: checking if needs delete clusters
on:
  workflow_call:
    secrets:
        ACCESS_TOKEN:
          required: true
        ARGOCD_HOSTNAME:
          required: true
        ARGOCD_PASSWORD:
          required: true
        KUBECONFIG_MASTER:
            required: true
jobs:
  inventory:
        name: inventory
        runs-on: self-hosted
        env:
          CI_COMMIT_MESSAGE: deleting cluster addons files to clusters deleted
        steps:
        - name: pulling repo 5gplustactile/provisioning
          uses: actions/checkout@v3
          with:
            repository: '5gplustactile/provisioning'
            ref: ${{ github.head_ref }}
            fetch-depth: 0
            token: ${{ secrets.ACCESS_TOKEN }}

        # extract branch name
        - name: Extract branch name
          shell: bash
          run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
          id: extract_branch

        - name: Get branch name
          run: echo 'The branch name is' ${{ steps.extract_branch.outputs.branch }}

        - name: Installing dependencies
          run: |  
           echo "### install yq ###"
           sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
           sudo chmod a+x /usr/local/bin/yq
           yq --version

           echo "### install jq ###"
           sudo apt install jq -y
           jq --version

           echo "## install gh ###"
           type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
           curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
           && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
           && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
           && sudo apt update \
           && sudo apt install gh -y

           # get the latest version or change to a specific version
           VERSION=$(curl --silent "https://api.github.com/repos/argoproj-labs/argocd-autopilot/releases/latest" | grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/')
           # download and extract the binary
           curl -L --output - https://github.com/argoproj-labs/argocd-autopilot/releases/download/$VERSION/argocd-autopilot-linux-amd64.tar.gz | tar zx
           # move the binary to your $PATH
           sudo mv ./argocd-autopilot-* /usr/local/bin/argocd-autopilot
           # check the installation
           argocd-autopilot version

           echo "### argocd ###"
           # download
           curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
           # install
           sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
           # delete package
           rm argocd-linux-amd64

           echo "### install kubectl ###"
           curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
           chmod +x kubectl
           sudo mv kubectl /usr/local/bin
           kubectl version --output=yaml

           echo "### clusterctl ###"
           curl -L https://github.com/kubernetes-sigs/cluster-api/releases/download/v1.5.1/clusterctl-linux-amd64 -o clusterctl
           sudo install -o root -g root -m 0755 clusterctl /usr/local/bin/clusterctl
           rm -rf clusterctl

        - name: Get branch name
          id: get_branch
          run: |
            if [[ "${{ github.event_name }}" == "pull_request_target" ]]; then
              echo "::set-output name=branch::${{ github.event.pull_request.head.ref }}"
            else
              echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
            fi
  
        - name: Use branch name
          run: |
            BRANCH_NAME=${{ steps.get_branch.outputs.branch }}
            echo "BRANCH_DT=$(echo $BRANCH_NAME | cut -d/ -f2)" >> $GITHUB_ENV
        - name: Get branch name
          run: |
            echo 'The branch name is' ${{ env.BRANCH_DT }}

        - name: copy provisioning repo to temporal folder
          run: |
            echo "# temporal folder tmp_provisioning"
            mkdir ../tmp_provisioning/
            cp -pr . ../tmp_provisioning/
            ls -lrt ../tmp_provisioning
 
        - name: pulling repo 5gplustactile/auto-ztp
          uses: actions/checkout@v3
          with:
            repository: '5gplustactile/auto-ztp'
            ref: main
            fetch-depth: 0
            token: ${{ secrets.ACCESS_TOKEN }}            
          
        - name: comparing provisioning and auto-ztp repositories
          run: |
            #!/bin/bash
            
            # Directories to compare
            dirs1=("../tmp_provisioning/${{ env.BRANCH_DT }}/edge" "../tmp_provisioning/${{ env.BRANCH_DT }}/region" "../tmp_provisioning/${{ env.BRANCH_DT }}/wavelength")
            dirs2=("sites/${{ env.BRANCH_DT }}/edge/clusters" "sites/${{ env.BRANCH_DT }}/region/clusters" "sites/${{ env.BRANCH_DT }}/wavelength/clusters")
            dirs2=("sites/${{ env.BRANCH_DT }}/edge/clusters" "sites/${{ env.BRANCH_DT }}/region/clusters" "sites/${{ env.BRANCH_DT }}/wavelength/clusters")
            
            # Compare file names in each pair of directories
            for i in ${!dirs1[@]}; do
              # Find .yaml files in the directories
              files1=($(find ${dirs1[$i]} -name "*.yaml"))
              files2=($(find ${dirs2[$i]} -name "*.yaml"))
            
              echo "Checking files in ${dirs1[$i]} and ${dirs2[$i]}"
            
              # Check for files in dirs1 that are also in dirs2
              for file1 in "${files1[@]}"; do
                for file2 in "${files2[@]}"; do
                  if [ "$(basename $file1)" == "$(basename $file2)" ]; then
                    echo "Same file found: $(basename $file1)"
                  fi
                done
              done
            
              # Check for files in dirs2 that are not in dirs1
              for file2 in "${files2[@]}"; do
                found=false
                for file1 in "${files1[@]}"; do
                  if [ "$(basename $file1)" == "$(basename $file2)" ]; then
                    found=true
                    break
                  fi
                done
                if [ "$found" = false ]; then
                  echo "File found in ${dirs2[$i]} but not in ${dirs1[$i]}: $(basename $file2)"

                  echo "### login argocd ###"
                  argocd login --username admin --password ${{ secrets.ARGOCD_PASSWORD }} internal-argocd-https-1137655741.eu-west-3.elb.amazonaws.com --insecure

                  path_file=${dirs2[$i]}/$(basename $file2)
                  echo path_file=$path_file

                  # get the name of cluster
                  CLUSTER_TO_DELETE=$(yq e '.metadata.name' $path_file | head -n 1)
                  echo CLUSTER_TO_DELETE=$CLUSTER_TO_DELETE

                  echo "cluster $CLUSTER_TO_DELETE is out of synced, exists in argocd but not in git provisioning repo and must be deleted from argocd"
                  echo ${{ secrets.KUBECONFIG_MASTER }} | base64 -d > ~/mgmt.kubeconfig
            
                  zone=$(ls $path_file | grep -E "/edge/|/region/|/wavelength/")

                  echo "$zone" | while read line ; do
                    if echo "$line" | grep -q "/edge/" ; then
                        echo "The output corresponds to edge"
                        
                        clusterctl get kubeconfig $CLUSTER_TO_DELETE -n $CLUSTER_TO_DELETE --kubeconfig ~/mgmt.kubeconfig > ~/$CLUSTER_TO_DELETE.kubeconfig
                        export ENDPOINT="$(kubectl cluster-info --kubeconfig ~/$CLUSTER_TO_DELETE.kubeconfig | awk '{print $NF}' | head -1 | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2};?)?)?[mGK]//g")"
                        echo "ENDPOINT=$ENDPOINT"

                        CLUSTER_TO_DELETE=${CLUSTER_TO_DELETE/edge-clusters-/}
                        echo CLUSTER_TO_DELETE=$CLUSTER_TO_DELETE

                        echo "### install pip dependencies ###"
                        pip install -r templates/cluster-addons/requirements.txt
                        
                        echo "### delete addons in $CLUSTER_TO_DELETE cluster placed in edge ###"
                        python templates/cluster-addons/python-addons.py --operation delete \
                        --file sites/${{ env.BRANCH_DT }}/edge/values-addons/ad-$CLUSTER_TO_DELETE.yaml \
                        --server "{ \"name\": \"$CLUSTER_TO_DELETE\", \"url\": \"$ENDPOINT\" }" --project addons

                        echo "deleting file about of cluster"
                        rm -rf ${dirs2[$i]}/$(basename $file2)

                        echo "deleting addons files about of cluster"
                        rm -rf sites/${{ env.BRANCH_DT }}/edge/values-addons/ad-$CLUSTER_TO_DELETE.yaml
                        rm -rf sites/${{ env.BRANCH_DT }}/edge/values-addons/app-$CLUSTER_TO_DELETE.yaml


                        echo "deleting cluster from argocd"
                        argocd cluster rm $CLUSTER_TO_DELETE -y || true

                    elif echo "$line" | grep -q "/region/" ; then
                        echo "The output corresponds to region"

                        clusterctl get kubeconfig $CLUSTER_TO_DELETE -n $CLUSTER_TO_DELETE --kubeconfig ~/mgmt.kubeconfig > ~/$CLUSTER_TO_DELETE.kubeconfig
                        export ENDPOINT="$(kubectl cluster-info --kubeconfig ~/$CLUSTER_TO_DELETE.kubeconfig | awk '{print $NF}' | head -1 | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2};?)?)?[mGK]//g")"
                        echo "ENDPOINT=$ENDPOINT"

                        CLUSTER_TO_DELETE=${CLUSTER_TO_DELETE/region-clusters-/}
                        echo CLUSTER_TO_DELETE=$CLUSTER_TO_DELETE

                        echo "### install pip dependencies ###"
                        pip install -r templates/cluster-addons/requirements.txt
                        
                        echo "### delete addons in $CLUSTER_TO_DELETE cluster placed in edge ###"
                        python templates/cluster-addons/python-addons.py --operation delete \
                        --file sites/${{ env.BRANCH_DT }}/region/addons/helm-cluster-addons/values.yaml \
                        --server "{ \"name\": \"$CLUSTER_TO_DELETE\", \"url\": \"$ENDPOINT\" }" --project addons

                        echo "deleting file about of cluster"
                        rm -rf ${dirs2[$i]}/$(basename $file2)

                        echo "deleting addons files about of cluster"
                        rm -rf sites/${{ env.BRANCH_DT }}/region/values-addons/ad-$CLUSTER_TO_DELETE.yaml
                        rm -rf sites/${{ env.BRANCH_DT }}/region/values-addons/app-$CLUSTER_TO_DELETE.yaml

                        echo "deleting cluster from argocd"
                        argocd cluster rm $CLUSTER_TO_DELETE -y || true

                    elif echo "$line" | grep -q "/wavelength/" ; then
                        echo "The output corresponds to wavelength"

                        clusterctl get kubeconfig $CLUSTER_TO_DELETE -n $CLUSTER_TO_DELETE --kubeconfig ~/mgmt.kubeconfig > ~/$CLUSTER_TO_DELETE.kubeconfig
                        export ENDPOINT="$(kubectl cluster-info --kubeconfig ~/$CLUSTER_TO_DELETE.kubeconfig | awk '{print $NF}' | head -1 | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2};?)?)?[mGK]//g")"
                        echo "ENDPOINT=$ENDPOINT"

                        CLUSTER_TO_DELETE=${CLUSTER_TO_DELETE/wavelength-clusters-/}
                        echo CLUSTER_TO_DELETE=$CLUSTER_TO_DELETE

                        echo "### install pip dependencies ###"
                        pip install -r templates/cluster-addons/requirements.txt
                        
                        echo "### delete addons in $CLUSTER_TO_DELETE cluster placed in edge ###"
                        python templates/cluster-addons/python-addons.py --operation delete \
                        --file sites/${{ env.BRANCH_DT }}/wavelength/addons/helm-cluster-addons/values.yaml \
                        --server "{ \"name\": \"$CLUSTER_TO_DELETE\", \"url\": \"$ENDPOINT\" }" --project addons

                        echo "deleting addons files about of cluster"
                        rm -rf sites/${{ env.BRANCH_DT }}/wavelength/values-addons/ad-$CLUSTER_TO_DELETE.yaml
                        rm -rf sites/${{ env.BRANCH_DT }}/wavelength/values-addons/app-$CLUSTER_TO_DELETE.yaml

                        echo "deleting file about of cluster"
                        rm -rf ${dirs2[$i]}/$(basename $file2)                        

                        echo "deleting cluster from argocd"
                        argocd cluster rm $CLUSTER_TO_DELETE -y || true

                    fi
                  done

                fi
              done
            done
            
            echo "deleting ../tmp_provisioning folder"
            rm -rf ../tmp_provisioning
  
        - name: commit changes in 5gplustactile/auto-ztp repository
          run: |
           git config --local user.email "action@github.com"
           git config --local user.name "GitHub Action"  
           git add .
           git commit -a -m "${{ env.CI_COMMIT_MESSAGE }}" --allow-empty
  
        - name: push changes in 5gplustactile/auto-ztp repository
          uses: ad-m/github-push-action@master
          with:
            branch: main
            repository: '5gplustactile/auto-ztp'
            github_token: ${{ secrets.ACCESS_TOKEN }}