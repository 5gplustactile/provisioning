name: provisioning cluster
on:
  workflow_call:
    secrets:
      ACCESS_TOKEN:
        required: true
      OPS_AWS_ACCESS_KEY_ID:
        required: true
      OPS_AWS_SECRET_ACCESS_KEY:
        required: true
      OPS_AWS_REGION:
          required: true
      SSH_PUB_KEY:
          required: true
      SSH_PRIV_KEY:
        required: true

jobs:
    terragrunt:
        name: terragrunt
        runs-on: self-hosted
        env:
          tf_version: 'latest'
          tg_version: 'latest'
        steps:
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.OPS_AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.OPS_AWS_SECRET_ACCESS_KEY }}
            aws-region: "${{ secrets.OPS_AWS_REGION }}"            

        # Install the latest version of Terragrunt CLI and configure the Terragrunt CLI configuration file with a Terragrunt Cloud user API token
        - name: Setup Terraform ${{ env.tf_version }}
          uses: hashicorp/setup-terraform@v1
          with:
            terraform_version: ${{ env.tf_version }}
            terraform_wrapper: false

        - name: Setup Terraform wrapper path
          run: |
            which terraform
            terraform --version

        - name: Setup Terragrunt version ${{ env.tg_version }}
          uses: autero1/action-terragrunt@v1.3.2
          with:
            terragrunt_version: ${{ env.tg_version }}
            token: ${{ secrets.ACCESS_TOKEN }}

        - name: Setup Terragrunt version
          run: |
            which terragrunt
            terragrunt --version

        # extract branch name
        - name: Extract branch name
          shell: bash
          run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
          id: extract_branch

        - name: Get branch name
          run: echo 'The branch name is' ${{ steps.extract_branch.outputs.branch }}

        - name: Getting variable branch
          run: |
           echo "BRANCH=$(echo ${{ steps.extract_branch.outputs.branch }} | cut -d/ -f2)" >> $GITHUB_ENV
           
        - name: pulling 5gplustactile/iac-terragrunt repo
          uses: actions/checkout@v3
          with:
            repository: '5gplustactile/iac-terragrunt'
            ref: ${{ github.head_ref }}
            fetch-depth: 0
            token: ${{ secrets.ACCESS_TOKEN }}

        - name: ssh github
          run: |
            ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -q -N ""
            echo ${{ secrets.SSH_PUB_KEY }} | base64 -d > ~/.ssh/id_rsa.pub
            echo ${{ secrets.SSH_PRIV_KEY }} | base64 -d > ~/.ssh/id_rsa
            ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
            ssh -T git@github.com  || true

        - name: 'Terragrunt init ${{ env.BRANCH }} - subnets'
          env:
            GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          run: |
            # change that to run-all before init flag
            terragrunt init -lock=false --terragrunt-non-interactive --terragrunt-source-update --terragrunt-include-external-dependencies
          working-directory: ./${{ secrets.OPS_AWS_REGION }}/iac/${{ env.BRANCH }}/subnets

        - name: 'Terragrunt validate ${{ env.BRANCH }} - subnets'
          run: |
            # change that to run-all before init flag
            terragrunt validate --terragrunt-non-interactive --terragrunt-source-update --terragrunt-include-external-dependencies
          working-directory: ./${{ secrets.OPS_AWS_REGION }}/iac/${{ env.BRANCH }}/subnets          

        - name: 'Terragrunt plan ${{ env.BRANCH }} - subnets'
          run: |
            # change that to run-all before init flag
            terragrunt plan -lock=false --terragrunt-non-interactive --terragrunt-source-update --terragrunt-include-external-dependencies
          working-directory: ./${{ secrets.OPS_AWS_REGION }}/iac/${{ env.BRANCH }}/subnets

        - name: 'Terragrunt apply ${{ env.BRANCH }} - subnets'
          id: apply
          run: |
            # change that to run-all before init flag
            terragrunt apply -auto-approve -lock=false --terragrunt-non-interactive --terragrunt-include-external-dependencies
          working-directory: ./${{ secrets.OPS_AWS_REGION }}/iac/${{ env.BRANCH }}/subnets

        - name: 'storage outputs terragrunt'
          run: |
            # storage outputs in file
            terragrunt output -json outpost_subnet_ids > /tmp/outpost_subnet_ids.json
            terragrunt output -json private_subnet_ids > /tmp/private_subnet_ids.json
          working-directory: ./${{ secrets.OPS_AWS_REGION }}/iac/${{ env.BRANCH }}/subnets

        - name: Upload outpost_subnet_ids.json
          uses: actions/upload-artifact@v2
          with:
            name: outpost_subnet_ids
            path: /tmp/outpost_subnet_ids.json
        
        - name: Upload private_subnet_ids.json
          uses: actions/upload-artifact@v2
          with:
            name: private_subnet_ids
            path: /tmp/private_subnet_ids.json

        - name: pulling repo 5gplustactile/auto-ztp
          uses: actions/checkout@v3
          with:
            repository: '5gplustactile/auto-ztp'
            ref: ${{ github.head_ref }}
            fetch-depth: 0
            token: ${{ secrets.ACCESS_TOKEN }}

        - name: Install Terrascan
          run: |
            curl -L "$(curl -s https://api.github.com/repos/accurics/terrascan/releases/latest | grep -o -E "https://.+?_Linux_x86_64.tar.gz")" > terrascan.tar.gz
            tar -xf terrascan.tar.gz terrascan
            sudo mv terrascan /usr/local/bin
            rm terrascan.tar.gz

        - name: Run Terrascan
          id: terrascan
          uses: tenable/terrascan-action@main
          with:
            iac_type: 'terraform'
            iac_version: 'v14'
            policy_type: 'aws'
            only_warn: true
            sarif_upload: false
            iac_dir: tf-modules/subnets/
           #non_recursive:
           #policy_path:
           #skip_rules:
           #config_path:
  
#        - name: Upload SARIF file
#          uses: github/codeql-action/upload-sarif@v1
#          with:
#            sarif_file: terrascan.sarif

        - name: Upload subnets-output.py
          uses: actions/upload-artifact@v2
          with:
            name: subnets-output
            path: templates/scripts/subnets-output.py

        - name: pulling repo 5gplustactile/provisioning
          uses: actions/checkout@v3
          with:
            repository: '5gplustactile/provisioning'
            ref: ${{ github.head_ref }}
            fetch-depth: 0
            token: ${{ secrets.ACCESS_TOKEN }}

        - name: Download outpost_subnet_ids.json
          uses: actions/download-artifact@v2
          with:
            name: outpost_subnet_ids

        - name: Download private_subnet_ids.json
          uses: actions/download-artifact@v2
          with:
            name: private_subnet_ids

        - name: Download subnets-output.py
          uses: actions/download-artifact@v2
          with:
            name: subnets-output

        - name: add subnets into values.yaml file - edge, region, wavelength
          run: |
           
           mv outpost_subnet_ids.json /tmp/outpost_subnet_ids.json
           mv private_subnet_ids.json /tmp/private_subnet_ids.json
           mv subnets-output.py /tmp/subnets-output.py

           echo "### install pip dependencies ###"
           pip install PyYAML
          
           echo "### execution subnets edge ###"
           python /tmp/subnets-output.py --path-ot-subnet-id=/tmp/outpost_subnet_ids.json \
            --path-private-subnet-id=/tmp/private_subnet_ids.json \
            --path-dir=${{ env.BRANCH }}/edge --path-dest=/tmp/${{ env.BRANCH }}/edge \
            --path-dest=/tmp/cloned_repo/sites/${{ env.BRANCH }}/edge/values-clusters/ \
            --git-token=${{ secrets.ACCESS_TOKEN }} --git-src=/tmp/ --user-name="GitHub Action" \
            --user-email="action@github.com"

           echo "### execution subnets region ###"
           python /tmp/subnets-output.py --path-ot-subnet-id=/tmp/outpost_subnet_ids.json \
            --path-private-subnet-id=/tmp/private_subnet_ids.json \
            --path-dir=${{ env.BRANCH }}/region --path-dest=/tmp/${{ env.BRANCH }}/region \
            --path-dest=/tmp/cloned_repo/sites/${{ env.BRANCH }}/region/values-clusters/ \
            --git-token=${{ secrets.ACCESS_TOKEN }} --git-src=/tmp/ --user-name="GitHub Action" \
            --user-email="action@github.com"

           echo "### execution subnets wavelenght ###"
           #python /tmp/subnets-output.py --path-ot-subnet-id=/tmp/outpost_subnet_ids.json \
           # --path-private-subnet-id=/tmp/private_subnet_ids.json \
           # --path-dir=${{ env.BRANCH }}/wavelength --path-dest=/tmp/${{ env.BRANCH }}/wavelength \
           # --path-dest=/tmp/cloned_repo/sites/${{ env.BRANCH }}/wavelength/values-clusters/ \
           # --git-token=${{ secrets.ACCESS_TOKEN }} --git-src=/tmp/ --user-name="GitHub Action" \
           # --user-email="action@github.com"