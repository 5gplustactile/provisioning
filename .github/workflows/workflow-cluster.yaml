name: provisioning cluster
on:
  workflow_call:
    secrets:
        ACCESS_TOKEN:
          required: true
        ARGOCD_HOSTNAME:
          required: true
        ARGOCD_PASSWORD:
          required: true
        GIT_REPO:
          required: true
jobs:
    provisioning:
        name: provisioning
        runs-on: self-hosted
        env:
          CI_COMMIT_MESSAGE: creating manifiest to create clusters
          ARGOCD_HOSTNAME: argocd-server.argocd.svc.cluster.local
        steps:
        - name: Checkout
          uses: actions/checkout@v3
          with:
            repository: '5gplustactile/provisioning'
            ref: ${{ github.head_ref }}
            fetch-depth: 0
            token: ${{ secrets.ACCESS_TOKEN }}

        # extract branch name
        - name: Extract branch name
          shell: bash
          run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
          id: extract_branch

        - name: Get branch name
          run: echo 'The branch name is' ${{ steps.extract_branch.outputs.branch }}

        - name: Installing dependencies
          run: |  
           echo "### install yq ###"
           sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
           sudo chmod a+x /usr/local/bin/yq
           yq --version

           echo "### install jq ###"
           sudo apt install jq -y
           jq --version

           echo "## install gh ###"
           type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
           curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
           && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
           && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
           && sudo apt update \
           && sudo apt install gh -y

           # get the latest version or change to a specific version
           VERSION=$(curl --silent "https://api.github.com/repos/argoproj-labs/argocd-autopilot/releases/latest" | grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/')
           # download and extract the binary
           curl -L --output - https://github.com/argoproj-labs/argocd-autopilot/releases/download/$VERSION/argocd-autopilot-linux-amd64.tar.gz | tar zx
           # move the binary to your $PATH
           sudo mv ./argocd-autopilot-* /usr/local/bin/argocd-autopilot
           # check the installation
           argocd-autopilot version

           echo "### argocd ###"
           # download
           curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
           # install
           sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
           # delete package
           rm argocd-linux-amd64

           echo "### install helm ###"
           # Download Helm
           curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3           
           # Give the script execute permission
           chmod 700 get_helm.sh           
           # Run the install script
           ./get_helm.sh
           helm version

        - name: create Pull Request
          env:
            TARGET_BRANCH: main
            TITLE: "creating/deleting manifiest to deploy/destroy cluster"
            BODY: "Created by GitHub Actions"
            REVIEWER: "andresanaya21"
            ASSIGNED: "andresanaya21"
            GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          run: |
            #!/bin/bash          
            while :
              do
                 if gh pr create -B ${{ env.TARGET_BRANCH }} -H ${{ steps.extract_branch.outputs.branch }} --title '${{ env.TITLE }}' --body '${{ env.BODY }}' \
                 --reviewer "${{ env.REVIEWER }}" --assignee ${{ env.ASSIGNED }} 2>/dev/null; then
                    echo "pull request created"
                    exit 0;
                  else
                    echo "skipping"
                    exit 0;
                 fi
              done

        - name: pulling repository 5gplustactile/auto-ztp
          uses: actions/checkout@v3
          with:
            repository: '5gplustactile/auto-ztp'
            ref: main
            fetch-depth: 0
            token: ${{ secrets.ACCESS_TOKEN }}

        - name: Getting variable branch
          run: |
           echo "BRANCH=$(echo ${{ steps.extract_branch.outputs.branch }} | cut -d/ -f2)" >> $GITHUB_ENV

        - name: helm template and store manfiest in the deployment folder - edge
          env:
            ZONE: edge
          run: |
           echo "### helm template and store manfiest in the deployment folder ###"

           #!/bin/bash

           # to debugging
           set -euxo pipefail
           # Directory to check
           dir="sites/${{ env.BRANCH }}/${{ env.ZONE }}/dry-run"
           # Initialize counter
           num_files=0
           # Print the paths of the files and the cluster name if a YAML file exists
           find "$dir" -name '*.yaml' -print0 | while IFS= read -r -d '' file
           do
               echo "Path: $file"
               if [ -f "$file" ]; then
                   cluster_name=$(yq e '.clusters[0].name' "$file")
                   echo "The cluster name in the YAML file is: $cluster_name"
                   helm version
                   helm template -n $cluster_name templates/helm-${{ env.ZONE }}-chart -f $file > sites/${{ env.BRANCH }}/${{ env.ZONE }}/$cluster_name.yaml
               fi
               ((num_files++))
           done
           
           echo "Found $num_files YAML files in the $dir directory."

        - name: helm template and store manfiest in the deployment folder - region
          env:
            ZONE: region
          run: |
           echo "### helm template and store manfiest in the deployment folder ###"

           #!/bin/bash

           # to debugging
           set -euxo pipefail
           # Directory to check
           dir="sites/${{ env.BRANCH }}/${{ env.ZONE }}/dry-run"
           # Initialize counter
           num_files=0
           # Print the paths of the files and the cluster name if a YAML file exists
           find "$dir" -name '*.yaml' -print0 | while IFS= read -r -d '' file
           do
               echo "Path: $file"
               if [ -f "$file" ]; then
                   cluster_name=$(yq e '.clusters[0].name' "$file")
                   echo "The cluster name in the YAML file is: $cluster_name"
                   helm version
                   helm template -n $cluster_name templates/helm-${{ env.ZONE }}-chart -f $file > sites/${{ env.BRANCH }}/${{ env.ZONE }}/$cluster_name.yaml
               fi
               ((num_files++))
           done
           
           echo "Found $num_files YAML files in the $dir directory."


        - name: helm template and store manfiest in the deployment folder - wavelength
          env:
            ZONE: wavelength
          run: |
           echo "### helm template and store manfiest in the deployment folder ###"

           #!/bin/bash

           # to debugging
           set -euxo pipefail
           # Directory to check
           dir="sites/${{ env.BRANCH }}/${{ env.ZONE }}/dry-run"
           # Initialize counter
           num_files=0
           # Print the paths of the files and the cluster name if a YAML file exists
           find "$dir" -name '*.yaml' -print0 | while IFS= read -r -d '' file
           do
               echo "Path: $file"
               if [ -f "$file" ]; then
                   cluster_name=$(yq e '.clusters[0].name' "$file")
                   echo "The cluster name in the YAML file is: $cluster_name"
                   helm version
                   helm template -n $cluster_name templates/helm-${{ env.ZONE }}-chart -f $file > sites/${{ env.BRANCH }}/${{ env.ZONE }}/$cluster_name.yaml
               fi
               ((num_files++))
           done
           
           echo "Found $num_files YAML files in the $dir directory."
           
        - name: commit changes in 5gplustactile/auto-ztp repository
          run: |
           git config --local user.email "action@github.com"
           git config --local user.name "GitHub Action"  
           git add .
           git commit -a -m "${{ env.CI_COMMIT_MESSAGE }}" --allow-empty
  
        - name: push changes in 5gplustactile/auto-ztp repository
          uses: ad-m/github-push-action@master
          with:
            branch: main
            repository: '5gplustactile/auto-ztp'
            github_token: ${{ secrets.ACCESS_TOKEN }}

        - name: creating app in argocd - edge
          env:
            ENVIRON: edge
          run: |
           #!/bin/bash
           export GIT_TOKEN=${{ secrets.ACCESS_TOKEN }}
           export GIT_REPO=${{ secrets.GIT_REPO }}
           while :
           do
              if argocd-autopilot app create ${{ env.BRANCH }}/${{ env.ENVIRON }} --app github.com/5gplustactile/auto-ztp/sites/${{ env.BRANCH }}/${{ env.ENVIRON }}?ref=main -p clusters --type dir --type dir; then
                 echo "app created"
                 exit 0;
               else
                exit 0;
              fi 
           done

        - name: creating app in argocd - region
          env:
            ENVIRON: region
          run: |
           #!/bin/bash
           export GIT_TOKEN=${{ secrets.ACCESS_TOKEN }}
           export GIT_REPO=${{ secrets.GIT_REPO }}
           while :
           do
              if argocd-autopilot app create ${{ env.BRANCH }}/${{ env.ENVIRON }} --app github.com/5gplustactile/auto-ztp/sites/${{ env.BRANCH }}/${{ env.ENVIRON }}?ref=main -p clusters --type dir --type dir; then
                 echo "app created"
                 exit 0;
               else
                exit 0;
              fi 
           done

        - name: creating app in argocd - wavelength
          env:
            ENVIRON: wavelength
          run: |
           #!/bin/bash
           export GIT_TOKEN=${{ secrets.ACCESS_TOKEN }}
           export GIT_REPO=${{ secrets.GIT_REPO }}
           while :
           do
              if argocd-autopilot app create ${{ env.BRANCH }}/${{ env.ENVIRON }} --app github.com/5gplustactile/auto-ztp/sites/${{ env.BRANCH }}/${{ env.ENVIRON }}?ref=main -p clusters --type dir --type dir; then
                 echo "app created"
                 exit 0;
               else
                exit 0;
              fi 
           done

        - name: cloning iac repository 5gplustactile/iac
          uses: actions/checkout@v3
          with:
            repository: '5gplustactile/iac'
            ref: main
            fetch-depth: 0
            token: ${{ secrets.ACCESS_TOKEN }}

        - name: appName and useGivenName - edge
          env:
            ENVIRON: edge
            APPNAME: edge-clusters
          run: |
           jq '.appName="${{ env.BRANCH }}-${{ env.APPNAME }}"' apps/${{ env.BRANCH }}/${{ env.ENVIRON }}/clusters/config_dir.json > apps/${{ env.BRANCH }}/${{ env.ENVIRON }}/clusters/config_dir.template
           jq '.userGivenName="${{ env.BRANCH }}-${{ env.APPNAME }}"' apps/${{ env.BRANCH }}/${{ env.ENVIRON }}/clusters/config_dir.template > apps/${{ env.BRANCH }}/${{ env.ENVIRON }}/clusters/config_dir.json
           rm -rf apps/${{ env.BRANCH }}/${{ env.ENVIRON }}/clusters/config_dir.template
           
        - name: appName and useGivenName - region
          env:
            ENVIRON: region
            APPNAME: region-clusters
          run: |
           jq '.appName="${{ env.BRANCH }}-${{ env.APPNAME }}"' apps/${{ env.BRANCH }}/${{ env.ENVIRON }}/clusters/config_dir.json > apps/${{ env.BRANCH }}/${{ env.ENVIRON }}/clusters/config_dir.template
           jq '.userGivenName="${{ env.BRANCH }}-${{ env.APPNAME }}"' apps/${{ env.BRANCH }}/${{ env.ENVIRON }}/clusters/config_dir.template > apps/${{ env.BRANCH }}/${{ env.ENVIRON }}/clusters/config_dir.json
           rm -rf apps/${{ env.BRANCH }}/${{ env.ENVIRON }}/clusters/config_dir.template

        - name: appName and useGivenName - wavelength
          env:
            ENVIRON: wavelength
            APPNAME: wavelength-clusters
          run: |
           jq '.appName="${{ env.BRANCH }}-${{ env.APPNAME }}"' apps/${{ env.BRANCH }}/${{ env.ENVIRON }}/clusters/config_dir.json > apps/${{ env.BRANCH }}/${{ env.ENVIRON }}/clusters/config_dir.template
           jq '.userGivenName="${{ env.BRANCH }}-${{ env.APPNAME }}"' apps/${{ env.BRANCH }}/${{ env.ENVIRON }}/clusters/config_dir.template > apps/${{ env.BRANCH }}/${{ env.ENVIRON }}/clusters/config_dir.json
           rm -rf apps/${{ env.BRANCH }}/${{ env.ENVIRON }}/clusters/config_dir.template


        - name: commit changes in 5gplustactile/iac repository
          run: |
           git config --local user.email "action@github.com"
           git config --local user.name "GitHub Action"  
           git add .
           git commit -a -m "${{ env.CI_COMMIT_MESSAGE }}" --allow-empty
  
        - name: push changes in 5gplustactile/iac repository
          uses: ad-m/github-push-action@master
          with:
            branch: main
            repository: '5gplustactile/iac'
            github_token: ${{ secrets.ACCESS_TOKEN }}

        - name: argocd edge - pre-deploy
          env:
            APPNAME: edge-clusters
          run: |
           argocd login --username admin --password ${{ secrets.ARGOCD_PASSWORD }}  ${{ env.ARGOCD_HOSTNAME }} --insecure
           argocd app sync clusters-${{ env.BRANCH }}-${{ env.APPNAME }} --dry-run

        - name: argocd edge - review difference against the target and live state before syncing app
          env:
            APPNAME: edge-clusters
          run: |
           argocd login --username admin --password ${{ secrets.ARGOCD_PASSWORD }}  ${{ env.ARGOCD_HOSTNAME }} --insecure
           echo "n" | argocd app sync clusters-${{ env.BRANCH }}-${{ env.APPNAME }}  --preview-changes

        - name: argocd region - pre-deploy
          env:
            APPNAME: region-clusters
          run: |
           argocd login --username admin --password ${{ secrets.ARGOCD_PASSWORD }}  ${{ env.ARGOCD_HOSTNAME }} --insecure
           argocd app sync clusters-${{ env.BRANCH }}-${{ env.APPNAME }} --dry-run

        - name: argocd region - review difference against the target and live state before syncing app
          env:
            APPNAME: region-clusters
          run: |
           argocd login --username admin --password ${{ secrets.ARGOCD_PASSWORD }}  ${{ env.ARGOCD_HOSTNAME }} --insecure
           echo "n" | argocd app sync clusters-${{ env.BRANCH }}-${{ env.APPNAME }} --preview-changes

#        - name: argocd wavelength - pre-deploy
#          env:
#            APPNAME: wavelength-clusters
#          run: |
#           argocd login --username admin --password ${{ secrets.ARGOCD_PASSWORD }}  ${{ env.ARGOCD_HOSTNAME }} --insecure
#           argocd app sync clusters-${{ env.BRANCH }}-${{ env.APPNAME }} --dry-run
#
#        - name: argocd wavelength - review difference against the target and live state before syncing app
#          env:
#            APPNAME: wavelength-clusters
#          run: |
#           argocd login --username admin --password ${{ secrets.ARGOCD_PASSWORD }}  ${{ env.ARGOCD_HOSTNAME }} --insecure
#           echo "n" | argocd app sync clusters-${{ env.BRANCH }}-${{ env.APPNAME }} --preview-changes           